//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ClientNodeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/Entities")]
    [System.SerializableAttribute()]
    public partial class Node : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string IdUniquek__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string Labelk__BackingFieldField;
        
        private Client.ClientNodeService.Line[] Linesk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<IdUnique>k__BackingField", IsRequired=true)]
        public string IdUniquek__BackingField {
            get {
                return this.IdUniquek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.IdUniquek__BackingFieldField, value) != true)) {
                    this.IdUniquek__BackingFieldField = value;
                    this.RaisePropertyChanged("IdUniquek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Label>k__BackingField", IsRequired=true)]
        public string Labelk__BackingField {
            get {
                return this.Labelk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Labelk__BackingFieldField, value) != true)) {
                    this.Labelk__BackingFieldField = value;
                    this.RaisePropertyChanged("Labelk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Lines>k__BackingField", IsRequired=true)]
        public Client.ClientNodeService.Line[] Linesk__BackingField {
            get {
                return this.Linesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Linesk__BackingFieldField, value) != true)) {
                    this.Linesk__BackingFieldField = value;
                    this.RaisePropertyChanged("Linesk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Line", Namespace="http://schemas.datacontract.org/2004/07/Entities")]
    [System.SerializableAttribute()]
    public partial class Line : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodeIdFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeIdFromUniqueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodeIdToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeIdToUniqueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodeIdFrom {
            get {
                return this.NodeIdFromField;
            }
            set {
                if ((this.NodeIdFromField.Equals(value) != true)) {
                    this.NodeIdFromField = value;
                    this.RaisePropertyChanged("NodeIdFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeIdFromUnique {
            get {
                return this.NodeIdFromUniqueField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIdFromUniqueField, value) != true)) {
                    this.NodeIdFromUniqueField = value;
                    this.RaisePropertyChanged("NodeIdFromUnique");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodeIdTo {
            get {
                return this.NodeIdToField;
            }
            set {
                if ((this.NodeIdToField.Equals(value) != true)) {
                    this.NodeIdToField = value;
                    this.RaisePropertyChanged("NodeIdTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeIdToUnique {
            get {
                return this.NodeIdToUniqueField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeIdToUniqueField, value) != true)) {
                    this.NodeIdToUniqueField = value;
                    this.RaisePropertyChanged("NodeIdToUnique");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientNodeService.IClientNodeService")]
    public interface IClientNodeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientNodeService/GetNodes", ReplyAction="http://tempuri.org/IClientNodeService/GetNodesResponse")]
        Client.ClientNodeService.Node[] GetNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientNodeService/GetNodes", ReplyAction="http://tempuri.org/IClientNodeService/GetNodesResponse")]
        System.Threading.Tasks.Task<Client.ClientNodeService.Node[]> GetNodesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientNodeServiceChannel : Client.ClientNodeService.IClientNodeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientNodeServiceClient : System.ServiceModel.ClientBase<Client.ClientNodeService.IClientNodeService>, Client.ClientNodeService.IClientNodeService {
        
        public ClientNodeServiceClient() {
        }
        
        public ClientNodeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientNodeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientNodeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientNodeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ClientNodeService.Node[] GetNodes() {
            return base.Channel.GetNodes();
        }
        
        public System.Threading.Tasks.Task<Client.ClientNodeService.Node[]> GetNodesAsync() {
            return base.Channel.GetNodesAsync();
        }
    }
}
